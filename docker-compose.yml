services:
  postgres:
    image: postgres:15-alpine
    container_name: apartment_accounting_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: apartment_accounting
      PGDATA: /var/lib/postgresql/data/pgdata
      # Timezone configuration
      TZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # You could also mount the initialization script here if needed
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - apartment_network

  # Optional admin interface (PGAdmin)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - apartment_network
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accounting_backend
    environment:
      FLASK_ENV: development
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/apartment_accounting
      DB_SCHEMA: accounting
      SECRET_KEY: your-secret-key-here-change-in-production
      JWT_ALGORITHM: HS256
      TOKEN_EXPIRES_SECONDS: 3600
    #ports:
    #  - "5000:5000"
    expose:
      - "5000"
    networks:
      - apartment_network
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: accounting_frontend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=/
    #ports:
     # - "8080:8080"
    expose:
      - "8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - apartment_network
  frontend-nginx:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: accounting_nginx
    ports:
      - "8000:80"
    depends_on:
      - backend
      - frontend
    networks:
      - apartment_network
networks:
  apartment_network:
    driver: bridge

volumes:
  postgres_data:
        
